// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable

library flatgen;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class TimeId {
  TimeId._(this._bc, this._bcOffset);
  factory TimeId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TimeId> reader = _TimeIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get place => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get unik => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);

  @override
  String toString() {
    return 'TimeId{place: ${place}, unik: ${unik}, timestamp: ${timestamp}}';
  }
}

class _TimeIdReader extends fb.TableReader<TimeId> {
  const _TimeIdReader();

  @override
  TimeId createObject(fb.BufferContext bc, int offset) => 
    TimeId._(bc, offset);
}

class TimeIdBuilder {
  TimeIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addPlaceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUnikOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(2, timestamp);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TimeIdObjectBuilder extends fb.ObjectBuilder {
  final String? _place;
  final String? _unik;
  final int? _timestamp;

  TimeIdObjectBuilder({
    String? place,
    String? unik,
    int? timestamp,
  })
      : _place = place,
        _unik = unik,
        _timestamp = timestamp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? placeOffset = _place == null ? null
        : fbBuilder.writeString(_place!);
    final int? unikOffset = _unik == null ? null
        : fbBuilder.writeString(_unik!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, placeOffset);
    fbBuilder.addOffset(1, unikOffset);
    fbBuilder.addInt64(2, _timestamp);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PushId {
  PushId._(this._bc, this._bcOffset);
  factory PushId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PushId> reader = _PushIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get prefix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get place => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get unik => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 10, 0);
  String? get suffix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'PushId{prefix: ${prefix}, place: ${place}, unik: ${unik}, timestamp: ${timestamp}, suffix: ${suffix}}';
  }
}

class _PushIdReader extends fb.TableReader<PushId> {
  const _PushIdReader();

  @override
  PushId createObject(fb.BufferContext bc, int offset) => 
    PushId._(bc, offset);
}

class PushIdBuilder {
  PushIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addPrefixOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPlaceOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addUnikOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(3, timestamp);
    return fbBuilder.offset;
  }
  int addSuffixOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PushIdObjectBuilder extends fb.ObjectBuilder {
  final String? _prefix;
  final String? _place;
  final String? _unik;
  final int? _timestamp;
  final String? _suffix;

  PushIdObjectBuilder({
    String? prefix,
    String? place,
    String? unik,
    int? timestamp,
    String? suffix,
  })
      : _prefix = prefix,
        _place = place,
        _unik = unik,
        _timestamp = timestamp,
        _suffix = suffix;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? prefixOffset = _prefix == null ? null
        : fbBuilder.writeString(_prefix!);
    final int? placeOffset = _place == null ? null
        : fbBuilder.writeString(_place!);
    final int? unikOffset = _unik == null ? null
        : fbBuilder.writeString(_unik!);
    final int? suffixOffset = _suffix == null ? null
        : fbBuilder.writeString(_suffix!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, prefixOffset);
    fbBuilder.addOffset(1, placeOffset);
    fbBuilder.addOffset(2, unikOffset);
    fbBuilder.addInt64(3, _timestamp);
    fbBuilder.addOffset(4, suffixOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PushRequest {
  PushRequest._(this._bc, this._bcOffset);
  factory PushRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PushRequest> reader = _PushRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  PushId? get pushId => PushId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get payload => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PushRequest{pushId: ${pushId}, payload: ${payload}}';
  }
}

class _PushRequestReader extends fb.TableReader<PushRequest> {
  const _PushRequestReader();

  @override
  PushRequest createObject(fb.BufferContext bc, int offset) => 
    PushRequest._(bc, offset);
}

class PushRequestBuilder {
  PushRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addPushIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addPayloadOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PushRequestObjectBuilder extends fb.ObjectBuilder {
  final PushIdObjectBuilder? _pushId;
  final List<int>? _payload;

  PushRequestObjectBuilder({
    PushIdObjectBuilder? pushId,
    List<int>? payload,
  })
      : _pushId = pushId,
        _payload = payload;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? pushIdOffset = _pushId?.getOrCreateOffset(fbBuilder);
    final int? payloadOffset = _payload == null ? null
        : fbBuilder.writeListUint8(_payload!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, pushIdOffset);
    fbBuilder.addOffset(1, payloadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageId {
  MessageId._(this._bc, this._bcOffset);
  factory MessageId(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageId> reader = _MessageIdReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get place => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get unik => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get suffix => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'MessageId{place: ${place}, unik: ${unik}, timestamp: ${timestamp}, root: ${root}, suffix: ${suffix}}';
  }
}

class _MessageIdReader extends fb.TableReader<MessageId> {
  const _MessageIdReader();

  @override
  MessageId createObject(fb.BufferContext bc, int offset) => 
    MessageId._(bc, offset);
}

class MessageIdBuilder {
  MessageIdBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addPlaceOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUnikOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(2, timestamp);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addSuffixOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageIdObjectBuilder extends fb.ObjectBuilder {
  final String? _place;
  final String? _unik;
  final int? _timestamp;
  final String? _root;
  final String? _suffix;

  MessageIdObjectBuilder({
    String? place,
    String? unik,
    int? timestamp,
    String? root,
    String? suffix,
  })
      : _place = place,
        _unik = unik,
        _timestamp = timestamp,
        _root = root,
        _suffix = suffix;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? placeOffset = _place == null ? null
        : fbBuilder.writeString(_place!);
    final int? unikOffset = _unik == null ? null
        : fbBuilder.writeString(_unik!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? suffixOffset = _suffix == null ? null
        : fbBuilder.writeString(_suffix!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, placeOffset);
    fbBuilder.addOffset(1, unikOffset);
    fbBuilder.addInt64(2, _timestamp);
    fbBuilder.addOffset(3, rootOffset);
    fbBuilder.addOffset(4, suffixOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ScrollRes {
  ScrollRes._(this._bc, this._bcOffset);
  factory ScrollRes(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ScrollRes> reader = _ScrollResReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get code => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  bool get before => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'ScrollRes{code: ${code}, before: ${before}, root: ${root}}';
  }
}

class _ScrollResReader extends fb.TableReader<ScrollRes> {
  const _ScrollResReader();

  @override
  ScrollRes createObject(fb.BufferContext bc, int offset) => 
    ScrollRes._(bc, offset);
}

class ScrollResBuilder {
  ScrollResBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addCode(bool? code) {
    fbBuilder.addBool(0, code);
    return fbBuilder.offset;
  }
  int addBefore(bool? before) {
    fbBuilder.addBool(1, before);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ScrollResObjectBuilder extends fb.ObjectBuilder {
  final bool? _code;
  final bool? _before;
  final String? _root;

  ScrollResObjectBuilder({
    bool? code,
    bool? before,
    String? root,
  })
      : _code = code,
        _before = before,
        _root = root;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    fbBuilder.startTable(3);
    fbBuilder.addBool(0, _code);
    fbBuilder.addBool(1, _before);
    fbBuilder.addOffset(2, rootOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MediaMetadata {
  MediaMetadata._(this._bc, this._bcOffset);
  factory MediaMetadata(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MediaMetadata> reader = _MediaMetadataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get timeId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get ownerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  int get timestamp => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 8, 0);
  String? get mime => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  bool get isReversed => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  bool get isEncrypted => const fb.BoolReader().vTableGet(_bc, _bcOffset, 14, false);
  bool get isPaidToView => const fb.BoolReader().vTableGet(_bc, _bcOffset, 16, false);
  bool get isPaidToOwn => const fb.BoolReader().vTableGet(_bc, _bcOffset, 18, false);
  bool get isLocked => const fb.BoolReader().vTableGet(_bc, _bcOffset, 20, false);
  bool get isSaved => const fb.BoolReader().vTableGet(_bc, _bcOffset, 22, false);
  String? get temp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);

  @override
  String toString() {
    return 'MediaMetadata{timeId: ${timeId}, ownerId: ${ownerId}, timestamp: ${timestamp}, mime: ${mime}, isReversed: ${isReversed}, isEncrypted: ${isEncrypted}, isPaidToView: ${isPaidToView}, isPaidToOwn: ${isPaidToOwn}, isLocked: ${isLocked}, isSaved: ${isSaved}, temp: ${temp}}';
  }
}

class _MediaMetadataReader extends fb.TableReader<MediaMetadata> {
  const _MediaMetadataReader();

  @override
  MediaMetadata createObject(fb.BufferContext bc, int offset) => 
    MediaMetadata._(bc, offset);
}

class MediaMetadataBuilder {
  MediaMetadataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(11);
  }

  int addTimeIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addOwnerIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addInt64(2, timestamp);
    return fbBuilder.offset;
  }
  int addMimeOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addIsReversed(bool? isReversed) {
    fbBuilder.addBool(4, isReversed);
    return fbBuilder.offset;
  }
  int addIsEncrypted(bool? isEncrypted) {
    fbBuilder.addBool(5, isEncrypted);
    return fbBuilder.offset;
  }
  int addIsPaidToView(bool? isPaidToView) {
    fbBuilder.addBool(6, isPaidToView);
    return fbBuilder.offset;
  }
  int addIsPaidToOwn(bool? isPaidToOwn) {
    fbBuilder.addBool(7, isPaidToOwn);
    return fbBuilder.offset;
  }
  int addIsLocked(bool? isLocked) {
    fbBuilder.addBool(8, isLocked);
    return fbBuilder.offset;
  }
  int addIsSaved(bool? isSaved) {
    fbBuilder.addBool(9, isSaved);
    return fbBuilder.offset;
  }
  int addTempOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MediaMetadataObjectBuilder extends fb.ObjectBuilder {
  final String? _timeId;
  final String? _ownerId;
  final int? _timestamp;
  final String? _mime;
  final bool? _isReversed;
  final bool? _isEncrypted;
  final bool? _isPaidToView;
  final bool? _isPaidToOwn;
  final bool? _isLocked;
  final bool? _isSaved;
  final String? _temp;

  MediaMetadataObjectBuilder({
    String? timeId,
    String? ownerId,
    int? timestamp,
    String? mime,
    bool? isReversed,
    bool? isEncrypted,
    bool? isPaidToView,
    bool? isPaidToOwn,
    bool? isLocked,
    bool? isSaved,
    String? temp,
  })
      : _timeId = timeId,
        _ownerId = ownerId,
        _timestamp = timestamp,
        _mime = mime,
        _isReversed = isReversed,
        _isEncrypted = isEncrypted,
        _isPaidToView = isPaidToView,
        _isPaidToOwn = isPaidToOwn,
        _isLocked = isLocked,
        _isSaved = isSaved,
        _temp = temp;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? timeIdOffset = _timeId == null ? null
        : fbBuilder.writeString(_timeId!);
    final int? ownerIdOffset = _ownerId == null ? null
        : fbBuilder.writeString(_ownerId!);
    final int? mimeOffset = _mime == null ? null
        : fbBuilder.writeString(_mime!);
    final int? tempOffset = _temp == null ? null
        : fbBuilder.writeString(_temp!);
    fbBuilder.startTable(11);
    fbBuilder.addOffset(0, timeIdOffset);
    fbBuilder.addOffset(1, ownerIdOffset);
    fbBuilder.addInt64(2, _timestamp);
    fbBuilder.addOffset(3, mimeOffset);
    fbBuilder.addBool(4, _isReversed);
    fbBuilder.addBool(5, _isEncrypted);
    fbBuilder.addBool(6, _isPaidToView);
    fbBuilder.addBool(7, _isPaidToOwn);
    fbBuilder.addBool(8, _isLocked);
    fbBuilder.addBool(9, _isSaved);
    fbBuilder.addOffset(10, tempOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FullMedia {
  FullMedia._(this._bc, this._bcOffset);
  factory FullMedia(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FullMedia> reader = _FullMediaReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MediaMetadata? get metadata => MediaMetadata.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FullMedia{metadata: ${metadata}, data: ${data}}';
  }
}

class _FullMediaReader extends fb.TableReader<FullMedia> {
  const _FullMediaReader();

  @override
  FullMedia createObject(fb.BufferContext bc, int offset) => 
    FullMedia._(bc, offset);
}

class FullMediaBuilder {
  FullMediaBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FullMediaObjectBuilder extends fb.ObjectBuilder {
  final MediaMetadataObjectBuilder? _metadata;
  final List<int>? _data;

  FullMediaObjectBuilder({
    MediaMetadataObjectBuilder? metadata,
    List<int>? data,
  })
      : _metadata = metadata,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? metadataOffset = _metadata?.getOrCreateOffset(fbBuilder);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, metadataOffset);
    fbBuilder.addOffset(1, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Offset {
  Offset._(this._bc, this._bcOffset);

  static const fb.Reader<Offset> reader = _OffsetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  double get x => const fb.Float32Reader().read(_bc, _bcOffset + 0);
  double get y => const fb.Float32Reader().read(_bc, _bcOffset + 4);

  @override
  String toString() {
    return 'Offset{x: ${x}, y: ${y}}';
  }
}

class _OffsetReader extends fb.StructReader<Offset> {
  const _OffsetReader();

  @override
  int get size => 8;

  @override
  Offset createObject(fb.BufferContext bc, int offset) => 
    Offset._(bc, offset);
}

class OffsetBuilder {
  OffsetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  int finish(double x, double y) {
    fbBuilder.putFloat32(y);
    fbBuilder.putFloat32(x);
    return fbBuilder.offset;
  }

}

class OffsetObjectBuilder extends fb.ObjectBuilder {
  final double _x;
  final double _y;

  OffsetObjectBuilder({
    required double x,
    required double y,
  })
      : _x = x,
        _y = y;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    fbBuilder.putFloat32(_y);
    fbBuilder.putFloat32(_x);
    return fbBuilder.offset;
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Sticker {
  Sticker._(this._bc, this._bcOffset);
  factory Sticker(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Sticker> reader = _StickerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get temp => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  Offset? get pos => Offset.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Offset? get size => Offset.reader.vTableGetNullable(_bc, _bcOffset, 10);
  double get rotation => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 12, 0.0);
  double get scale => const fb.Float32Reader().vTableGet(_bc, _bcOffset, 14, 0.0);
  String? get emoji => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'Sticker{mediaId: ${mediaId}, temp: ${temp}, pos: ${pos}, size: ${size}, rotation: ${rotation}, scale: ${scale}, emoji: ${emoji}}';
  }
}

class _StickerReader extends fb.TableReader<Sticker> {
  const _StickerReader();

  @override
  Sticker createObject(fb.BufferContext bc, int offset) => 
    Sticker._(bc, offset);
}

class StickerBuilder {
  StickerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTempOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addPos(int offset) {
    fbBuilder.addStruct(2, offset);
    return fbBuilder.offset;
  }
  int addSize(int offset) {
    fbBuilder.addStruct(3, offset);
    return fbBuilder.offset;
  }
  int addRotation(double? rotation) {
    fbBuilder.addFloat32(4, rotation);
    return fbBuilder.offset;
  }
  int addScale(double? scale) {
    fbBuilder.addFloat32(5, scale);
    return fbBuilder.offset;
  }
  int addEmojiOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class StickerObjectBuilder extends fb.ObjectBuilder {
  final String? _mediaId;
  final String? _temp;
  final OffsetObjectBuilder? _pos;
  final OffsetObjectBuilder? _size;
  final double? _rotation;
  final double? _scale;
  final String? _emoji;

  StickerObjectBuilder({
    String? mediaId,
    String? temp,
    OffsetObjectBuilder? pos,
    OffsetObjectBuilder? size,
    double? rotation,
    double? scale,
    String? emoji,
  })
      : _mediaId = mediaId,
        _temp = temp,
        _pos = pos,
        _size = size,
        _rotation = rotation,
        _scale = scale,
        _emoji = emoji;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempOffset = _temp == null ? null
        : fbBuilder.writeString(_temp!);
    final int? emojiOffset = _emoji == null ? null
        : fbBuilder.writeString(_emoji!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, mediaIdOffset);
    fbBuilder.addOffset(1, tempOffset);
    if (_pos != null) {
      fbBuilder.addStruct(2, _pos!.finish(fbBuilder));
    }
    if (_size != null) {
      fbBuilder.addStruct(3, _size!.finish(fbBuilder));
    }
    fbBuilder.addFloat32(4, _rotation);
    fbBuilder.addFloat32(5, _scale);
    fbBuilder.addOffset(6, emojiOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class FullSticker {
  FullSticker._(this._bc, this._bcOffset);
  factory FullSticker(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<FullSticker> reader = _FullStickerReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Sticker? get sticker => Sticker.reader.vTableGetNullable(_bc, _bcOffset, 4);
  FullMedia? get fullMedia => FullMedia.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'FullSticker{sticker: ${sticker}, fullMedia: ${fullMedia}}';
  }
}

class _FullStickerReader extends fb.TableReader<FullSticker> {
  const _FullStickerReader();

  @override
  FullSticker createObject(fb.BufferContext bc, int offset) => 
    FullSticker._(bc, offset);
}

class FullStickerBuilder {
  FullStickerBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addStickerOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFullMediaOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class FullStickerObjectBuilder extends fb.ObjectBuilder {
  final StickerObjectBuilder? _sticker;
  final FullMediaObjectBuilder? _fullMedia;

  FullStickerObjectBuilder({
    StickerObjectBuilder? sticker,
    FullMediaObjectBuilder? fullMedia,
  })
      : _sticker = sticker,
        _fullMedia = fullMedia;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? stickerOffset = _sticker?.getOrCreateOffset(fbBuilder);
    final int? fullMediaOffset = _fullMedia?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, stickerOffset);
    fbBuilder.addOffset(1, fullMediaOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageEventRequest {
  MessageEventRequest._(this._bc, this._bcOffset);
  factory MessageEventRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageEventRequest> reader = _MessageEventRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get type => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 4, 0);
  MessageEvent? get messageEvent => MessageEvent.reader.vTableGetNullable(_bc, _bcOffset, 6);
  FullMedia? get fullMedia => FullMedia.reader.vTableGetNullable(_bc, _bcOffset, 8);
  Notifications? get notifications => Notifications.reader.vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'MessageEventRequest{type: ${type}, messageEvent: ${messageEvent}, fullMedia: ${fullMedia}, notifications: ${notifications}}';
  }
}

class _MessageEventRequestReader extends fb.TableReader<MessageEventRequest> {
  const _MessageEventRequestReader();

  @override
  MessageEventRequest createObject(fb.BufferContext bc, int offset) => 
    MessageEventRequest._(bc, offset);
}

class MessageEventRequestBuilder {
  MessageEventRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addType(int? type) {
    fbBuilder.addUint8(0, type);
    return fbBuilder.offset;
  }
  int addMessageEventOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFullMediaOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addNotificationsOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageEventRequestObjectBuilder extends fb.ObjectBuilder {
  final int? _type;
  final MessageEventObjectBuilder? _messageEvent;
  final FullMediaObjectBuilder? _fullMedia;
  final NotificationsObjectBuilder? _notifications;

  MessageEventRequestObjectBuilder({
    int? type,
    MessageEventObjectBuilder? messageEvent,
    FullMediaObjectBuilder? fullMedia,
    NotificationsObjectBuilder? notifications,
  })
      : _type = type,
        _messageEvent = messageEvent,
        _fullMedia = fullMedia,
        _notifications = notifications;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageEventOffset = _messageEvent?.getOrCreateOffset(fbBuilder);
    final int? fullMediaOffset = _fullMedia?.getOrCreateOffset(fbBuilder);
    final int? notificationsOffset = _notifications?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(4);
    fbBuilder.addUint8(0, _type);
    fbBuilder.addOffset(1, messageEventOffset);
    fbBuilder.addOffset(2, fullMediaOffset);
    fbBuilder.addOffset(3, notificationsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageEvent {
  MessageEvent._(this._bc, this._bcOffset);
  factory MessageEvent(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageEvent> reader = _MessageEventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  MessageId? get chatId => MessageId.reader.vTableGetNullable(_bc, _bcOffset, 4);
  int get type => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get reactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get senderId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get messageId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get tag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  int get timestamp => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 18, 0);
  String? get forwardedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get paymentId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  List<String>? get nodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  List<String>? get replies => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  String? get txt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  String? get tempMedia => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  String? get tempPayment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  String? get emoji => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  List<Sticker>? get sticks => const fb.ListReader<Sticker>(Sticker.reader).vTableGetNullable(_bc, _bcOffset, 38);
  Offset? get snipSize => Offset.reader.vTableGetNullable(_bc, _bcOffset, 40);

  @override
  String toString() {
    return 'MessageEvent{chatId: ${chatId}, type: ${type}, reactionId: ${reactionId}, senderId: ${senderId}, messageId: ${messageId}, root: ${root}, tag: ${tag}, timestamp: ${timestamp}, forwardedFrom: ${forwardedFrom}, paymentId: ${paymentId}, nodes: ${nodes}, replies: ${replies}, txt: ${txt}, mediaId: ${mediaId}, tempMedia: ${tempMedia}, tempPayment: ${tempPayment}, emoji: ${emoji}, sticks: ${sticks}, snipSize: ${snipSize}}';
  }
}

class _MessageEventReader extends fb.TableReader<MessageEvent> {
  const _MessageEventReader();

  @override
  MessageEvent createObject(fb.BufferContext bc, int offset) => 
    MessageEvent._(bc, offset);
}

class MessageEventBuilder {
  MessageEventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(19);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(int? type) {
    fbBuilder.addUint8(1, type);
    return fbBuilder.offset;
  }
  int addReactionIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSenderIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint64(7, timestamp);
    return fbBuilder.offset;
  }
  int addForwardedFromOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPaymentIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addNodesOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addRepliesOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addTxtOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTempMediaOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTempPaymentOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addEmojiOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSticksOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSnipSize(int offset) {
    fbBuilder.addStruct(18, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageEventObjectBuilder extends fb.ObjectBuilder {
  final MessageIdObjectBuilder? _chatId;
  final int? _type;
  final String? _reactionId;
  final String? _senderId;
  final String? _messageId;
  final String? _root;
  final String? _tag;
  final int? _timestamp;
  final String? _forwardedFrom;
  final String? _paymentId;
  final List<String>? _nodes;
  final List<String>? _replies;
  final String? _txt;
  final String? _mediaId;
  final String? _tempMedia;
  final String? _tempPayment;
  final String? _emoji;
  final List<StickerObjectBuilder>? _sticks;
  final OffsetObjectBuilder? _snipSize;

  MessageEventObjectBuilder({
    MessageIdObjectBuilder? chatId,
    int? type,
    String? reactionId,
    String? senderId,
    String? messageId,
    String? root,
    String? tag,
    int? timestamp,
    String? forwardedFrom,
    String? paymentId,
    List<String>? nodes,
    List<String>? replies,
    String? txt,
    String? mediaId,
    String? tempMedia,
    String? tempPayment,
    String? emoji,
    List<StickerObjectBuilder>? sticks,
    OffsetObjectBuilder? snipSize,
  })
      : _chatId = chatId,
        _type = type,
        _reactionId = reactionId,
        _senderId = senderId,
        _messageId = messageId,
        _root = root,
        _tag = tag,
        _timestamp = timestamp,
        _forwardedFrom = forwardedFrom,
        _paymentId = paymentId,
        _nodes = nodes,
        _replies = replies,
        _txt = txt,
        _mediaId = mediaId,
        _tempMedia = tempMedia,
        _tempPayment = tempPayment,
        _emoji = emoji,
        _sticks = sticks,
        _snipSize = snipSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId?.getOrCreateOffset(fbBuilder);
    final int? reactionIdOffset = _reactionId == null ? null
        : fbBuilder.writeString(_reactionId!);
    final int? senderIdOffset = _senderId == null ? null
        : fbBuilder.writeString(_senderId!);
    final int? messageIdOffset = _messageId == null ? null
        : fbBuilder.writeString(_messageId!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? tagOffset = _tag == null ? null
        : fbBuilder.writeString(_tag!);
    final int? forwardedFromOffset = _forwardedFrom == null ? null
        : fbBuilder.writeString(_forwardedFrom!);
    final int? paymentIdOffset = _paymentId == null ? null
        : fbBuilder.writeString(_paymentId!);
    final int? nodesOffset = _nodes == null ? null
        : fbBuilder.writeList(_nodes!.map(fbBuilder.writeString).toList());
    final int? repliesOffset = _replies == null ? null
        : fbBuilder.writeList(_replies!.map(fbBuilder.writeString).toList());
    final int? txtOffset = _txt == null ? null
        : fbBuilder.writeString(_txt!);
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempMediaOffset = _tempMedia == null ? null
        : fbBuilder.writeString(_tempMedia!);
    final int? tempPaymentOffset = _tempPayment == null ? null
        : fbBuilder.writeString(_tempPayment!);
    final int? emojiOffset = _emoji == null ? null
        : fbBuilder.writeString(_emoji!);
    final int? sticksOffset = _sticks == null ? null
        : fbBuilder.writeList(_sticks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(19);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addUint8(1, _type);
    fbBuilder.addOffset(2, reactionIdOffset);
    fbBuilder.addOffset(3, senderIdOffset);
    fbBuilder.addOffset(4, messageIdOffset);
    fbBuilder.addOffset(5, rootOffset);
    fbBuilder.addOffset(6, tagOffset);
    fbBuilder.addUint64(7, _timestamp);
    fbBuilder.addOffset(8, forwardedFromOffset);
    fbBuilder.addOffset(9, paymentIdOffset);
    fbBuilder.addOffset(10, nodesOffset);
    fbBuilder.addOffset(11, repliesOffset);
    fbBuilder.addOffset(12, txtOffset);
    fbBuilder.addOffset(13, mediaIdOffset);
    fbBuilder.addOffset(14, tempMediaOffset);
    fbBuilder.addOffset(15, tempPaymentOffset);
    fbBuilder.addOffset(16, emojiOffset);
    fbBuilder.addOffset(17, sticksOffset);
    if (_snipSize != null) {
      fbBuilder.addStruct(18, _snipSize!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageEvent2 {
  MessageEvent2._(this._bc, this._bcOffset);
  factory MessageEvent2(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageEvent2> reader = _MessageEvent2Reader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get chatId => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get type => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0);
  String? get reactionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get senderId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get messageId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  String? get tag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  int get timestamp => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 18, 0);
  String? get forwardedFrom => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  String? get paymentId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 22);
  List<String>? get nodes => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 24);
  List<String>? get replies => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 26);
  String? get txt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 30);
  String? get tempMedia => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 32);
  String? get tempPayment => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 34);
  String? get emoji => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 36);
  List<Sticker>? get sticks => const fb.ListReader<Sticker>(Sticker.reader).vTableGetNullable(_bc, _bcOffset, 38);
  Offset? get snipSize => Offset.reader.vTableGetNullable(_bc, _bcOffset, 40);

  @override
  String toString() {
    return 'MessageEvent2{chatId: ${chatId}, type: ${type}, reactionId: ${reactionId}, senderId: ${senderId}, messageId: ${messageId}, root: ${root}, tag: ${tag}, timestamp: ${timestamp}, forwardedFrom: ${forwardedFrom}, paymentId: ${paymentId}, nodes: ${nodes}, replies: ${replies}, txt: ${txt}, mediaId: ${mediaId}, tempMedia: ${tempMedia}, tempPayment: ${tempPayment}, emoji: ${emoji}, sticks: ${sticks}, snipSize: ${snipSize}}';
  }
}

class _MessageEvent2Reader extends fb.TableReader<MessageEvent2> {
  const _MessageEvent2Reader();

  @override
  MessageEvent2 createObject(fb.BufferContext bc, int offset) => 
    MessageEvent2._(bc, offset);
}

class MessageEvent2Builder {
  MessageEvent2Builder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(19);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(int? type) {
    fbBuilder.addUint8(1, type);
    return fbBuilder.offset;
  }
  int addReactionIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addSenderIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addMessageIdOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addTimestamp(int? timestamp) {
    fbBuilder.addUint64(7, timestamp);
    return fbBuilder.offset;
  }
  int addForwardedFromOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addPaymentIdOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addNodesOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addRepliesOffset(int? offset) {
    fbBuilder.addOffset(11, offset);
    return fbBuilder.offset;
  }
  int addTxtOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addTempMediaOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addTempPaymentOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addEmojiOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addSticksOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addSnipSize(int offset) {
    fbBuilder.addStruct(18, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageEvent2ObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _chatId;
  final int? _type;
  final String? _reactionId;
  final String? _senderId;
  final String? _messageId;
  final String? _root;
  final String? _tag;
  final int? _timestamp;
  final String? _forwardedFrom;
  final String? _paymentId;
  final List<String>? _nodes;
  final List<String>? _replies;
  final String? _txt;
  final String? _mediaId;
  final String? _tempMedia;
  final String? _tempPayment;
  final String? _emoji;
  final List<StickerObjectBuilder>? _sticks;
  final OffsetObjectBuilder? _snipSize;

  MessageEvent2ObjectBuilder({
    List<int>? chatId,
    int? type,
    String? reactionId,
    String? senderId,
    String? messageId,
    String? root,
    String? tag,
    int? timestamp,
    String? forwardedFrom,
    String? paymentId,
    List<String>? nodes,
    List<String>? replies,
    String? txt,
    String? mediaId,
    String? tempMedia,
    String? tempPayment,
    String? emoji,
    List<StickerObjectBuilder>? sticks,
    OffsetObjectBuilder? snipSize,
  })
      : _chatId = chatId,
        _type = type,
        _reactionId = reactionId,
        _senderId = senderId,
        _messageId = messageId,
        _root = root,
        _tag = tag,
        _timestamp = timestamp,
        _forwardedFrom = forwardedFrom,
        _paymentId = paymentId,
        _nodes = nodes,
        _replies = replies,
        _txt = txt,
        _mediaId = mediaId,
        _tempMedia = tempMedia,
        _tempPayment = tempPayment,
        _emoji = emoji,
        _sticks = sticks,
        _snipSize = snipSize;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId == null ? null
        : fbBuilder.writeListUint8(_chatId!);
    final int? reactionIdOffset = _reactionId == null ? null
        : fbBuilder.writeString(_reactionId!);
    final int? senderIdOffset = _senderId == null ? null
        : fbBuilder.writeString(_senderId!);
    final int? messageIdOffset = _messageId == null ? null
        : fbBuilder.writeString(_messageId!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? tagOffset = _tag == null ? null
        : fbBuilder.writeString(_tag!);
    final int? forwardedFromOffset = _forwardedFrom == null ? null
        : fbBuilder.writeString(_forwardedFrom!);
    final int? paymentIdOffset = _paymentId == null ? null
        : fbBuilder.writeString(_paymentId!);
    final int? nodesOffset = _nodes == null ? null
        : fbBuilder.writeList(_nodes!.map(fbBuilder.writeString).toList());
    final int? repliesOffset = _replies == null ? null
        : fbBuilder.writeList(_replies!.map(fbBuilder.writeString).toList());
    final int? txtOffset = _txt == null ? null
        : fbBuilder.writeString(_txt!);
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempMediaOffset = _tempMedia == null ? null
        : fbBuilder.writeString(_tempMedia!);
    final int? tempPaymentOffset = _tempPayment == null ? null
        : fbBuilder.writeString(_tempPayment!);
    final int? emojiOffset = _emoji == null ? null
        : fbBuilder.writeString(_emoji!);
    final int? sticksOffset = _sticks == null ? null
        : fbBuilder.writeList(_sticks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(19);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addUint8(1, _type);
    fbBuilder.addOffset(2, reactionIdOffset);
    fbBuilder.addOffset(3, senderIdOffset);
    fbBuilder.addOffset(4, messageIdOffset);
    fbBuilder.addOffset(5, rootOffset);
    fbBuilder.addOffset(6, tagOffset);
    fbBuilder.addUint64(7, _timestamp);
    fbBuilder.addOffset(8, forwardedFromOffset);
    fbBuilder.addOffset(9, paymentIdOffset);
    fbBuilder.addOffset(10, nodesOffset);
    fbBuilder.addOffset(11, repliesOffset);
    fbBuilder.addOffset(12, txtOffset);
    fbBuilder.addOffset(13, mediaIdOffset);
    fbBuilder.addOffset(14, tempMediaOffset);
    fbBuilder.addOffset(15, tempPaymentOffset);
    fbBuilder.addOffset(16, emojiOffset);
    fbBuilder.addOffset(17, sticksOffset);
    if (_snipSize != null) {
      fbBuilder.addStruct(18, _snipSize!.finish(fbBuilder));
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageTarget {
  MessageTarget._(this._bc, this._bcOffset);
  factory MessageTarget(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageTarget> reader = _MessageTargetReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get deviceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get token => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  bool get showNotif => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  bool get doPush => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);

  @override
  String toString() {
    return 'MessageTarget{userId: ${userId}, deviceId: ${deviceId}, token: ${token}, showNotif: ${showNotif}, doPush: ${doPush}}';
  }
}

class _MessageTargetReader extends fb.TableReader<MessageTarget> {
  const _MessageTargetReader();

  @override
  MessageTarget createObject(fb.BufferContext bc, int offset) => 
    MessageTarget._(bc, offset);
}

class MessageTargetBuilder {
  MessageTargetBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDeviceIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTokenOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addShowNotif(bool? showNotif) {
    fbBuilder.addBool(3, showNotif);
    return fbBuilder.offset;
  }
  int addDoPush(bool? doPush) {
    fbBuilder.addBool(4, doPush);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageTargetObjectBuilder extends fb.ObjectBuilder {
  final String? _userId;
  final String? _deviceId;
  final String? _token;
  final bool? _showNotif;
  final bool? _doPush;

  MessageTargetObjectBuilder({
    String? userId,
    String? deviceId,
    String? token,
    bool? showNotif,
    bool? doPush,
  })
      : _userId = userId,
        _deviceId = deviceId,
        _token = token,
        _showNotif = showNotif,
        _doPush = doPush;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    final int? deviceIdOffset = _deviceId == null ? null
        : fbBuilder.writeString(_deviceId!);
    final int? tokenOffset = _token == null ? null
        : fbBuilder.writeString(_token!);
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, userIdOffset);
    fbBuilder.addOffset(1, deviceIdOffset);
    fbBuilder.addOffset(2, tokenOffset);
    fbBuilder.addBool(3, _showNotif);
    fbBuilder.addBool(4, _doPush);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Notifications {
  Notifications._(this._bc, this._bcOffset);
  factory Notifications(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Notifications> reader = _NotificationsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get sender => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get header => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get body => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  List<MessageTarget>? get targets => const fb.ListReader<MessageTarget>(MessageTarget.reader).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'Notifications{sender: ${sender}, root: ${root}, header: ${header}, body: ${body}, targets: ${targets}}';
  }
}

class _NotificationsReader extends fb.TableReader<Notifications> {
  const _NotificationsReader();

  @override
  Notifications createObject(fb.BufferContext bc, int offset) => 
    Notifications._(bc, offset);
}

class NotificationsBuilder {
  NotificationsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addSenderOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRootOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addHeaderOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addBodyOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTargetsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NotificationsObjectBuilder extends fb.ObjectBuilder {
  final String? _sender;
  final String? _root;
  final String? _header;
  final String? _body;
  final List<MessageTargetObjectBuilder>? _targets;

  NotificationsObjectBuilder({
    String? sender,
    String? root,
    String? header,
    String? body,
    List<MessageTargetObjectBuilder>? targets,
  })
      : _sender = sender,
        _root = root,
        _header = header,
        _body = body,
        _targets = targets;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? senderOffset = _sender == null ? null
        : fbBuilder.writeString(_sender!);
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? headerOffset = _header == null ? null
        : fbBuilder.writeString(_header!);
    final int? bodyOffset = _body == null ? null
        : fbBuilder.writeString(_body!);
    final int? targetsOffset = _targets == null ? null
        : fbBuilder.writeList(_targets!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, senderOffset);
    fbBuilder.addOffset(1, rootOffset);
    fbBuilder.addOffset(2, headerOffset);
    fbBuilder.addOffset(3, bodyOffset);
    fbBuilder.addOffset(4, targetsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ChatScrollRequest {
  ChatScrollRequest._(this._bc, this._bcOffset);
  factory ChatScrollRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ChatScrollRequest> reader = _ChatScrollRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get chatId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get before => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'ChatScrollRequest{chatId: ${chatId}, before: ${before}}';
  }
}

class _ChatScrollRequestReader extends fb.TableReader<ChatScrollRequest> {
  const _ChatScrollRequestReader();

  @override
  ChatScrollRequest createObject(fb.BufferContext bc, int offset) => 
    ChatScrollRequest._(bc, offset);
}

class ChatScrollRequestBuilder {
  ChatScrollRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBefore(bool? before) {
    fbBuilder.addBool(1, before);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ChatScrollRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _chatId;
  final bool? _before;

  ChatScrollRequestObjectBuilder({
    String? chatId,
    bool? before,
  })
      : _chatId = chatId,
        _before = before;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId == null ? null
        : fbBuilder.writeString(_chatId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addBool(1, _before);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Snip {
  Snip._(this._bc, this._bcOffset);
  factory Snip(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Snip> reader = _SnipReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get chatId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get senderId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get tag => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get tempMedia => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  String? get txt => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 14);
  Offset? get snipSize => Offset.reader.vTableGetNullable(_bc, _bcOffset, 16);
  List<Sticker>? get sticks => const fb.ListReader<Sticker>(Sticker.reader).vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'Snip{chatId: ${chatId}, senderId: ${senderId}, tag: ${tag}, mediaId: ${mediaId}, tempMedia: ${tempMedia}, txt: ${txt}, snipSize: ${snipSize}, sticks: ${sticks}}';
  }
}

class _SnipReader extends fb.TableReader<Snip> {
  const _SnipReader();

  @override
  Snip createObject(fb.BufferContext bc, int offset) => 
    Snip._(bc, offset);
}

class SnipBuilder {
  SnipBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addChatIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSenderIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addTagOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTempMediaOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addTxtOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSnipSize(int offset) {
    fbBuilder.addStruct(6, offset);
    return fbBuilder.offset;
  }
  int addSticksOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SnipObjectBuilder extends fb.ObjectBuilder {
  final String? _chatId;
  final String? _senderId;
  final String? _tag;
  final String? _mediaId;
  final String? _tempMedia;
  final String? _txt;
  final OffsetObjectBuilder? _snipSize;
  final List<StickerObjectBuilder>? _sticks;

  SnipObjectBuilder({
    String? chatId,
    String? senderId,
    String? tag,
    String? mediaId,
    String? tempMedia,
    String? txt,
    OffsetObjectBuilder? snipSize,
    List<StickerObjectBuilder>? sticks,
  })
      : _chatId = chatId,
        _senderId = senderId,
        _tag = tag,
        _mediaId = mediaId,
        _tempMedia = tempMedia,
        _txt = txt,
        _snipSize = snipSize,
        _sticks = sticks;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? chatIdOffset = _chatId == null ? null
        : fbBuilder.writeString(_chatId!);
    final int? senderIdOffset = _senderId == null ? null
        : fbBuilder.writeString(_senderId!);
    final int? tagOffset = _tag == null ? null
        : fbBuilder.writeString(_tag!);
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? tempMediaOffset = _tempMedia == null ? null
        : fbBuilder.writeString(_tempMedia!);
    final int? txtOffset = _txt == null ? null
        : fbBuilder.writeString(_txt!);
    final int? sticksOffset = _sticks == null ? null
        : fbBuilder.writeList(_sticks!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, chatIdOffset);
    fbBuilder.addOffset(1, senderIdOffset);
    fbBuilder.addOffset(2, tagOffset);
    fbBuilder.addOffset(3, mediaIdOffset);
    fbBuilder.addOffset(4, tempMediaOffset);
    fbBuilder.addOffset(5, txtOffset);
    if (_snipSize != null) {
      fbBuilder.addStruct(6, _snipSize!.finish(fbBuilder));
    }
    fbBuilder.addOffset(7, sticksOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MessageToken {
  MessageToken._(this._bc, this._bcOffset);
  factory MessageToken(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MessageToken> reader = _MessageTokenReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get deviceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get token => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'MessageToken{deviceId: ${deviceId}, token: ${token}}';
  }
}

class _MessageTokenReader extends fb.TableReader<MessageToken> {
  const _MessageTokenReader();

  @override
  MessageToken createObject(fb.BufferContext bc, int offset) => 
    MessageToken._(bc, offset);
}

class MessageTokenBuilder {
  MessageTokenBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addDeviceIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTokenOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MessageTokenObjectBuilder extends fb.ObjectBuilder {
  final String? _deviceId;
  final String? _token;

  MessageTokenObjectBuilder({
    String? deviceId,
    String? token,
  })
      : _deviceId = deviceId,
        _token = token;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? deviceIdOffset = _deviceId == null ? null
        : fbBuilder.writeString(_deviceId!);
    final int? tokenOffset = _token == null ? null
        : fbBuilder.writeString(_token!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, deviceIdOffset);
    fbBuilder.addOffset(1, tokenOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class HashTree {
  HashTree._(this._bc, this._bcOffset);
  factory HashTree(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<HashTree> reader = _HashTreeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get hash => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'HashTree{root: ${root}, hash: ${hash}}';
  }
}

class _HashTreeReader extends fb.TableReader<HashTree> {
  const _HashTreeReader();

  @override
  HashTree createObject(fb.BufferContext bc, int offset) => 
    HashTree._(bc, offset);
}

class HashTreeBuilder {
  HashTreeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRootOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addHashOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class HashTreeObjectBuilder extends fb.ObjectBuilder {
  final String? _root;
  final String? _hash;

  HashTreeObjectBuilder({
    String? root,
    String? hash,
  })
      : _root = root,
        _hash = hash;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? hashOffset = _hash == null ? null
        : fbBuilder.writeString(_hash!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, rootOffset);
    fbBuilder.addOffset(1, hashOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class ChatConnReq {
  ChatConnReq._(this._bc, this._bcOffset);
  factory ChatConnReq(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ChatConnReq> reader = _ChatConnReqReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get root => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get deviceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'ChatConnReq{root: ${root}, deviceId: ${deviceId}}';
  }
}

class _ChatConnReqReader extends fb.TableReader<ChatConnReq> {
  const _ChatConnReqReader();

  @override
  ChatConnReq createObject(fb.BufferContext bc, int offset) => 
    ChatConnReq._(bc, offset);
}

class ChatConnReqBuilder {
  ChatConnReqBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addRootOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addDeviceIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ChatConnReqObjectBuilder extends fb.ObjectBuilder {
  final String? _root;
  final String? _deviceId;

  ChatConnReqObjectBuilder({
    String? root,
    String? deviceId,
  })
      : _root = root,
        _deviceId = deviceId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? rootOffset = _root == null ? null
        : fbBuilder.writeString(_root!);
    final int? deviceIdOffset = _deviceId == null ? null
        : fbBuilder.writeString(_deviceId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, rootOffset);
    fbBuilder.addOffset(1, deviceIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class Node {
  Node._(this._bc, this._bcOffset);
  factory Node(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Node> reader = _NodeReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get type => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get lastName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get blueHash => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  int get lastUpdate => const fb.Int64Reader().vTableGet(_bc, _bcOffset, 14, 0);
  String? get description => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);
  List<MessageToken>? get messagingTokens => const fb.ListReader<MessageToken>(MessageToken.reader).vTableGetNullable(_bc, _bcOffset, 18);
  String? get mainDeviceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 20);
  List<HashTree>? get hashTree => const fb.ListReader<HashTree>(HashTree.reader).vTableGetNullable(_bc, _bcOffset, 22);
  String? get ownerId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 24);
  bool get isPublic => const fb.BoolReader().vTableGet(_bc, _bcOffset, 26, false);
  String? get mediaId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 28);
  List<String>? get children => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 30);
  List<String>? get posts => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 32);
  List<String>? get admins => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 34);
  List<String>? get members => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 36);
  List<String>? get privates => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 38);
  String? get deviceId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 40);
  String? get neuter => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 42);
  double get latitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 44, 0.0);
  double get longitude => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 46, 0.0);

  @override
  String toString() {
    return 'Node{id: ${id}, type: ${type}, name: ${name}, lastName: ${lastName}, blueHash: ${blueHash}, lastUpdate: ${lastUpdate}, description: ${description}, messagingTokens: ${messagingTokens}, mainDeviceId: ${mainDeviceId}, hashTree: ${hashTree}, ownerId: ${ownerId}, isPublic: ${isPublic}, mediaId: ${mediaId}, children: ${children}, posts: ${posts}, admins: ${admins}, members: ${members}, privates: ${privates}, deviceId: ${deviceId}, neuter: ${neuter}, latitude: ${latitude}, longitude: ${longitude}}';
  }
}

class _NodeReader extends fb.TableReader<Node> {
  const _NodeReader();

  @override
  Node createObject(fb.BufferContext bc, int offset) => 
    Node._(bc, offset);
}

class NodeBuilder {
  NodeBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(22);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTypeOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addBlueHashOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addLastUpdate(int? lastUpdate) {
    fbBuilder.addInt64(5, lastUpdate);
    return fbBuilder.offset;
  }
  int addDescriptionOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addMessagingTokensOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addMainDeviceIdOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addHashTreeOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }
  int addOwnerIdOffset(int? offset) {
    fbBuilder.addOffset(10, offset);
    return fbBuilder.offset;
  }
  int addIsPublic(bool? isPublic) {
    fbBuilder.addBool(11, isPublic);
    return fbBuilder.offset;
  }
  int addMediaIdOffset(int? offset) {
    fbBuilder.addOffset(12, offset);
    return fbBuilder.offset;
  }
  int addChildrenOffset(int? offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }
  int addPostsOffset(int? offset) {
    fbBuilder.addOffset(14, offset);
    return fbBuilder.offset;
  }
  int addAdminsOffset(int? offset) {
    fbBuilder.addOffset(15, offset);
    return fbBuilder.offset;
  }
  int addMembersOffset(int? offset) {
    fbBuilder.addOffset(16, offset);
    return fbBuilder.offset;
  }
  int addPrivatesOffset(int? offset) {
    fbBuilder.addOffset(17, offset);
    return fbBuilder.offset;
  }
  int addDeviceIdOffset(int? offset) {
    fbBuilder.addOffset(18, offset);
    return fbBuilder.offset;
  }
  int addNeuterOffset(int? offset) {
    fbBuilder.addOffset(19, offset);
    return fbBuilder.offset;
  }
  int addLatitude(double? latitude) {
    fbBuilder.addFloat64(20, latitude);
    return fbBuilder.offset;
  }
  int addLongitude(double? longitude) {
    fbBuilder.addFloat64(21, longitude);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _type;
  final String? _name;
  final String? _lastName;
  final String? _blueHash;
  final int? _lastUpdate;
  final String? _description;
  final List<MessageTokenObjectBuilder>? _messagingTokens;
  final String? _mainDeviceId;
  final List<HashTreeObjectBuilder>? _hashTree;
  final String? _ownerId;
  final bool? _isPublic;
  final String? _mediaId;
  final List<String>? _children;
  final List<String>? _posts;
  final List<String>? _admins;
  final List<String>? _members;
  final List<String>? _privates;
  final String? _deviceId;
  final String? _neuter;
  final double? _latitude;
  final double? _longitude;

  NodeObjectBuilder({
    String? id,
    String? type,
    String? name,
    String? lastName,
    String? blueHash,
    int? lastUpdate,
    String? description,
    List<MessageTokenObjectBuilder>? messagingTokens,
    String? mainDeviceId,
    List<HashTreeObjectBuilder>? hashTree,
    String? ownerId,
    bool? isPublic,
    String? mediaId,
    List<String>? children,
    List<String>? posts,
    List<String>? admins,
    List<String>? members,
    List<String>? privates,
    String? deviceId,
    String? neuter,
    double? latitude,
    double? longitude,
  })
      : _id = id,
        _type = type,
        _name = name,
        _lastName = lastName,
        _blueHash = blueHash,
        _lastUpdate = lastUpdate,
        _description = description,
        _messagingTokens = messagingTokens,
        _mainDeviceId = mainDeviceId,
        _hashTree = hashTree,
        _ownerId = ownerId,
        _isPublic = isPublic,
        _mediaId = mediaId,
        _children = children,
        _posts = posts,
        _admins = admins,
        _members = members,
        _privates = privates,
        _deviceId = deviceId,
        _neuter = neuter,
        _latitude = latitude,
        _longitude = longitude;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? typeOffset = _type == null ? null
        : fbBuilder.writeString(_type!);
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? lastNameOffset = _lastName == null ? null
        : fbBuilder.writeString(_lastName!);
    final int? blueHashOffset = _blueHash == null ? null
        : fbBuilder.writeString(_blueHash!);
    final int? descriptionOffset = _description == null ? null
        : fbBuilder.writeString(_description!);
    final int? messagingTokensOffset = _messagingTokens == null ? null
        : fbBuilder.writeList(_messagingTokens!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? mainDeviceIdOffset = _mainDeviceId == null ? null
        : fbBuilder.writeString(_mainDeviceId!);
    final int? hashTreeOffset = _hashTree == null ? null
        : fbBuilder.writeList(_hashTree!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? ownerIdOffset = _ownerId == null ? null
        : fbBuilder.writeString(_ownerId!);
    final int? mediaIdOffset = _mediaId == null ? null
        : fbBuilder.writeString(_mediaId!);
    final int? childrenOffset = _children == null ? null
        : fbBuilder.writeList(_children!.map(fbBuilder.writeString).toList());
    final int? postsOffset = _posts == null ? null
        : fbBuilder.writeList(_posts!.map(fbBuilder.writeString).toList());
    final int? adminsOffset = _admins == null ? null
        : fbBuilder.writeList(_admins!.map(fbBuilder.writeString).toList());
    final int? membersOffset = _members == null ? null
        : fbBuilder.writeList(_members!.map(fbBuilder.writeString).toList());
    final int? privatesOffset = _privates == null ? null
        : fbBuilder.writeList(_privates!.map(fbBuilder.writeString).toList());
    final int? deviceIdOffset = _deviceId == null ? null
        : fbBuilder.writeString(_deviceId!);
    final int? neuterOffset = _neuter == null ? null
        : fbBuilder.writeString(_neuter!);
    fbBuilder.startTable(22);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, typeOffset);
    fbBuilder.addOffset(2, nameOffset);
    fbBuilder.addOffset(3, lastNameOffset);
    fbBuilder.addOffset(4, blueHashOffset);
    fbBuilder.addInt64(5, _lastUpdate);
    fbBuilder.addOffset(6, descriptionOffset);
    fbBuilder.addOffset(7, messagingTokensOffset);
    fbBuilder.addOffset(8, mainDeviceIdOffset);
    fbBuilder.addOffset(9, hashTreeOffset);
    fbBuilder.addOffset(10, ownerIdOffset);
    fbBuilder.addBool(11, _isPublic);
    fbBuilder.addOffset(12, mediaIdOffset);
    fbBuilder.addOffset(13, childrenOffset);
    fbBuilder.addOffset(14, postsOffset);
    fbBuilder.addOffset(15, adminsOffset);
    fbBuilder.addOffset(16, membersOffset);
    fbBuilder.addOffset(17, privatesOffset);
    fbBuilder.addOffset(18, deviceIdOffset);
    fbBuilder.addOffset(19, neuterOffset);
    fbBuilder.addFloat64(20, _latitude);
    fbBuilder.addFloat64(21, _longitude);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeResponse {
  NodeResponse._(this._bc, this._bcOffset);
  factory NodeResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeResponse> reader = _NodeResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Node>? get nodes => const fb.ListReader<Node>(Node.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'NodeResponse{nodes: ${nodes}}';
  }
}

class _NodeResponseReader extends fb.TableReader<NodeResponse> {
  const _NodeResponseReader();

  @override
  NodeResponse createObject(fb.BufferContext bc, int offset) => 
    NodeResponse._(bc, offset);
}

class NodeResponseBuilder {
  NodeResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addNodesOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeResponseObjectBuilder extends fb.ObjectBuilder {
  final List<NodeObjectBuilder>? _nodes;

  NodeResponseObjectBuilder({
    List<NodeObjectBuilder>? nodes,
  })
      : _nodes = nodes;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nodesOffset = _nodes == null ? null
        : fbBuilder.writeList(_nodes!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, nodesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NodeRequest {
  NodeRequest._(this._bc, this._bcOffset);
  factory NodeRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NodeRequest> reader = _NodeRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  Node? get node => Node.reader.vTableGetNullable(_bc, _bcOffset, 4);
  MediaMetadata? get media => MediaMetadata.reader.vTableGetNullable(_bc, _bcOffset, 6);
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'NodeRequest{node: ${node}, media: ${media}, data: ${data}}';
  }
}

class _NodeRequestReader extends fb.TableReader<NodeRequest> {
  const _NodeRequestReader();

  @override
  NodeRequest createObject(fb.BufferContext bc, int offset) => 
    NodeRequest._(bc, offset);
}

class NodeRequestBuilder {
  NodeRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNodeOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addMediaOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NodeRequestObjectBuilder extends fb.ObjectBuilder {
  final NodeObjectBuilder? _node;
  final MediaMetadataObjectBuilder? _media;
  final List<int>? _data;

  NodeRequestObjectBuilder({
    NodeObjectBuilder? node,
    MediaMetadataObjectBuilder? media,
    List<int>? data,
  })
      : _node = node,
        _media = media,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nodeOffset = _node?.getOrCreateOffset(fbBuilder);
    final int? mediaOffset = _media?.getOrCreateOffset(fbBuilder);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, nodeOffset);
    fbBuilder.addOffset(1, mediaOffset);
    fbBuilder.addOffset(2, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class PaymentPush {
  PaymentPush._(this._bc, this._bcOffset);
  factory PaymentPush(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<PaymentPush> reader = _PaymentPushReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get id => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get tempId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'PaymentPush{id: ${id}, tempId: ${tempId}}';
  }
}

class _PaymentPushReader extends fb.TableReader<PaymentPush> {
  const _PaymentPushReader();

  @override
  PaymentPush createObject(fb.BufferContext bc, int offset) => 
    PaymentPush._(bc, offset);
}

class PaymentPushBuilder {
  PaymentPushBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTempIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class PaymentPushObjectBuilder extends fb.ObjectBuilder {
  final String? _id;
  final String? _tempId;

  PaymentPushObjectBuilder({
    String? id,
    String? tempId,
  })
      : _id = id,
        _tempId = tempId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? idOffset = _id == null ? null
        : fbBuilder.writeString(_id!);
    final int? tempIdOffset = _tempId == null ? null
        : fbBuilder.writeString(_tempId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, idOffset);
    fbBuilder.addOffset(1, tempIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
